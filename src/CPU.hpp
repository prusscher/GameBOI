#ifndef cpu_hpp
#define cpu_hpp

#include <stdint.h>

class CPU {

    public:
        CPU();
        ~CPU();

    private:


        // Here goes the instructions ohboi
        void NOP();
        void LD_BC_d16(uint8_t operand);
        void LD_BC_E_A();
        void INC_BC();
        void INC_B();
        void DEC_B();
        void LD_B_d8(uint8_t operand);
        void RLCA();
        void LD_a16_E_SP(uint16_t operand);
        void ADD_HL_BC();
        void LD_A_BC_E();
        void DEC_BC();
        void INC_C();
        void DEC_C();
        void LD_C_d8(uint8_t operand);
        void RRCA();
        void STOP_0();
        void LD_DE_d16(uint8_t operand);
        void LD_DE_E_A();
        void INC_DE();
        void INC_D();
        void DEC_D();
        void LD_D_d8(uint8_t operand);
        void RLA();
        void JR_r8(uint8_t operand);
        void ADD_HL_DE();
        void LD_A_DE_E();
        void DEC_DE();
        void INC_E();
        void DEC_E();
        void LD_E_d8(uint8_t operand);
        void RRA();
        void JR_NZ_r8(uint8_t operand);
        void LD_HL_d16(uint8_t operand);
        void LD_HLI_E_A();
        void INC_HL();
        void INC_H();
        void DEC_H();
        void LD_H_d8(uint8_t operand);
        void DAA();
        void JR_Z_r8(uint8_t operand);
        void ADD_HL_HL();
        void LD_A_HLI_E();
        void DEC_HL();
        void INC_L();
        void DEC_L();
        void LD_L_d8(uint8_t operand);
        void CPL();
        void JR_NC_r8(uint8_t operand);
        void LD_SP_d16(uint8_t operand);
        void LD_HLD_E_A();
        void INC_SP();
        void INC_HL_E();
        void DEC_HL_E();
        void LD_HL_E_d8(uint8_t operand);
        void SCF();
        void JR_C_r8(uint8_t operand);
        void ADD_HL_SP();
        void LD_A_HLD_E();
        void DEC_SP();
        void INC_A();
        void DEC_A();
        void LD_A_d8(uint8_t operand);
        void CCF();
        void LD_B_B();
        void LD_B_C();
        void LD_B_D();
        void LD_B_E();
        void LD_B_H();
        void LD_B_L();
        void LD_B_HL_E();
        void LD_B_A();
        void LD_C_B();
        void LD_C_C();
        void LD_C_D();
        void LD_C_E();
        void LD_C_H();
        void LD_C_L();
        void LD_C_HL_E();
        void LD_C_A();
        void LD_D_B();
        void LD_D_C();
        void LD_D_D();
        void LD_D_E();
        void LD_D_H();
        void LD_D_L();
        void LD_D_HL_E();
        void LD_D_A();
        void LD_E_B();
        void LD_E_C();
        void LD_E_D();
        void LD_E_E();
        void LD_E_H();
        void LD_E_L();
        void LD_E_HL_E();
        void LD_E_A();
        void LD_H_B();
        void LD_H_C();
        void LD_H_D();
        void LD_H_E();
        void LD_H_H();
        void LD_H_L();
        void LD_H_HL_E();
        void LD_H_A();
        void LD_L_B();
        void LD_L_C();
        void LD_L_D();
        void LD_L_E();
        void LD_L_H();
        void LD_L_L();
        void LD_L_HL_E();
        void LD_L_A();
        void LD_HL_E_B();
        void LD_HL_E_C();
        void LD_HL_E_D();
        void LD_HL_E_E();
        void LD_HL_E_H();
        void LD_HL_E_L();
        void HALT();
        void LD_HL_E_A();
        void LD_A_B();
        void LD_A_C();
        void LD_A_D();
        void LD_A_E();
        void LD_A_H();
        void LD_A_L();
        void LD_A_HL_E();
        void LD_A_A();
        void ADD_A_B();
        void ADD_A_C();
        void ADD_A_D();
        void ADD_A_E();
        void ADD_A_H();
        void ADD_A_L();
        void ADD_A_HL_E();
        void ADD_A_A();
        void ADC_A_B();
        void ADC_A_C();
        void ADC_A_D();
        void ADC_A_E();
        void ADC_A_H();
        void ADC_A_L();
        void ADC_A_HL_E();
        void ADC_A_A();
        void SUB_B();
        void SUB_C();
        void SUB_D();
        void SUB_E();
        void SUB_H();
        void SUB_L();
        void SUB_HL_E();
        void SUB_A();
        void SBC_A_B();
        void SBC_A_C();
        void SBC_A_D();
        void SBC_A_E();
        void SBC_A_H();
        void SBC_A_L();
        void SBC_A_HL_E();
        void SBC_A_A();
        void AND_B();
        void AND_C();
        void AND_D();
        void AND_E();
        void AND_H();
        void AND_L();
        void AND_HL_E();
        void AND_A();
        void XOR_B();
        void XOR_C();
        void XOR_D();
        void XOR_E();
        void XOR_H();
        void XOR_L();
        void XOR_HL_E();
        void XOR_A();
        void OR_B();
        void OR_C();
        void OR_D();
        void OR_E();
        void OR_H();
        void OR_L();
        void OR_HL_E();
        void OR_A();
        void CP_B();
        void CP_C();
        void CP_D();
        void CP_E();
        void CP_H();
        void CP_L();
        void CP_HL_E();
        void CP_A();
        void RET_NZ();
        void POP_BC();
        void JP_NZ_a16(uint8_t operand);
        void JP_a16(uint8_t operand);
        void CALL_NZ_a16(uint8_t operand);
        void PUSH_BC();
        void ADD_A_d8(uint8_t operand);
        void RST_00H();
        void RET_Z();
        void RET();
        void JP_Z_a16(uint8_t operand);
        void PREFIX_CB();
        void CALL_Z_a16(uint8_t operand);
        void CALL_a16(uint8_t operand);
        void ADC_A_d8(uint8_t operand);
        void RST_08H();
        void RET_NC();
        void POP_DE();
        void JP_NC_a16(uint8_t operand);
        void CALL_NC_a16(uint8_t operand);
        void PUSH_DE();
        void SUB_d8(uint8_t operand);
        void RST_10H();
        void RET_C();
        void RETI();
        void JP_C_a16(uint8_t operand);
        void CALL_C_a16(uint8_t operand);
        void SBC_A_d8(uint8_t operand);
        void RST_18H();
        void LDH_a8_E_A(uint8_t operand);
        void POP_HL();
        void LD_C_E_A();
        void PUSH_HL();
        void AND_d8(uint8_t operand);
        void RST_20H();
        void ADD_SP_r8(uint8_t operand);
        void JP_HL_E();
        void LD_a16_E_A(uint16_t operand);
        void XOR_d8(uint8_t operand);
        void RST_28H();
        void LDH_A_a8_E(uint8_t operand);
        void POP_AF();
        void LD_A_C_E();
        void DI();
        void PUSH_AF();
        void OR_d8(uint8_t operand);
        void RST_30H();
        void LD_HL_SPIr8();
        void LD_SP_HL();
        void LD_A_a16_E(uint16_t operand);
        void EI();
        void CP_d8(uint8_t operand);
        void RST_38H();
        void CB_RLC_B();
        void CB_RLC_C();
        void CB_RLC_D();
        void CB_RLC_E();
        void CB_RLC_H();
        void CB_RLC_L();
        void CB_RLC_HL_E();
        void CB_RLC_A();
        void CB_RRC_B();
        void CB_RRC_C();
        void CB_RRC_D();
        void CB_RRC_E();
        void CB_RRC_H();
        void CB_RRC_L();
        void CB_RRC_HL_E();
        void CB_RRC_A();
        void CB_RL_B();
        void CB_RL_C();
        void CB_RL_D();
        void CB_RL_E();
        void CB_RL_H();
        void CB_RL_L();
        void CB_RL_HL_E();
        void CB_RL_A();
        void CB_RR_B();
        void CB_RR_C();
        void CB_RR_D();
        void CB_RR_E();
        void CB_RR_H();
        void CB_RR_L();
        void CB_RR_HL_E();
        void CB_RR_A();
        void CB_SLA_B();
        void CB_SLA_C();
        void CB_SLA_D();
        void CB_SLA_E();
        void CB_SLA_H();
        void CB_SLA_L();
        void CB_SLA_HL_E();
        void CB_SLA_A();
        void CB_SRA_B();
        void CB_SRA_C();
        void CB_SRA_D();
        void CB_SRA_E();
        void CB_SRA_H();
        void CB_SRA_L();
        void CB_SRA_HL_E();
        void CB_SRA_A();
        void CB_SWAP_B();
        void CB_SWAP_C();
        void CB_SWAP_D();
        void CB_SWAP_E();
        void CB_SWAP_H();
        void CB_SWAP_L();
        void CB_SWAP_HL_E();
        void CB_SWAP_A();
        void CB_SRL_B();
        void CB_SRL_C();
        void CB_SRL_D();
        void CB_SRL_E();
        void CB_SRL_H();
        void CB_SRL_L();
        void CB_SRL_HL_E();
        void CB_SRL_A();
        void CB_BIT_0_B();
        void CB_BIT_0_C();
        void CB_BIT_0_D();
        void CB_BIT_0_E();
        void CB_BIT_0_H();
        void CB_BIT_0_L();
        void CB_BIT_0_HL_E();
        void CB_BIT_0_A();
        void CB_BIT_1_B();
        void CB_BIT_1_C();
        void CB_BIT_1_D();
        void CB_BIT_1_E();
        void CB_BIT_1_H();
        void CB_BIT_1_L();
        void CB_BIT_1_HL_E();
        void CB_BIT_1_A();
        void CB_BIT_2_B();
        void CB_BIT_2_C();
        void CB_BIT_2_D();
        void CB_BIT_2_E();
        void CB_BIT_2_H();
        void CB_BIT_2_L();
        void CB_BIT_2_HL_E();
        void CB_BIT_2_A();
        void CB_BIT_3_B();
        void CB_BIT_3_C();
        void CB_BIT_3_D();
        void CB_BIT_3_E();
        void CB_BIT_3_H();
        void CB_BIT_3_L();
        void CB_BIT_3_HL_E();
        void CB_BIT_3_A();
        void CB_BIT_4_B();
        void CB_BIT_4_C();
        void CB_BIT_4_D();
        void CB_BIT_4_E();
        void CB_BIT_4_H();
        void CB_BIT_4_L();
        void CB_BIT_4_HL_E();
        void CB_BIT_4_A();
        void CB_BIT_5_B();
        void CB_BIT_5_C();
        void CB_BIT_5_D();
        void CB_BIT_5_E();
        void CB_BIT_5_H();
        void CB_BIT_5_L();
        void CB_BIT_5_HL_E();
        void CB_BIT_5_A();
        void CB_BIT_6_B();
        void CB_BIT_6_C();
        void CB_BIT_6_D();
        void CB_BIT_6_E();
        void CB_BIT_6_H();
        void CB_BIT_6_L();
        void CB_BIT_6_HL_E();
        void CB_BIT_6_A();
        void CB_BIT_7_B();
        void CB_BIT_7_C();
        void CB_BIT_7_D();
        void CB_BIT_7_E();
        void CB_BIT_7_H();
        void CB_BIT_7_L();
        void CB_BIT_7_HL_E();
        void CB_BIT_7_A();
        void CB_RES_0_B();
        void CB_RES_0_C();
        void CB_RES_0_D();
        void CB_RES_0_E();
        void CB_RES_0_H();
        void CB_RES_0_L();
        void CB_RES_0_HL_E();
        void CB_RES_0_A();
        void CB_RES_1_B();
        void CB_RES_1_C();
        void CB_RES_1_D();
        void CB_RES_1_E();
        void CB_RES_1_H();
        void CB_RES_1_L();
        void CB_RES_1_HL_E();
        void CB_RES_1_A();
        void CB_RES_2_B();
        void CB_RES_2_C();
        void CB_RES_2_D();
        void CB_RES_2_E();
        void CB_RES_2_H();
        void CB_RES_2_L();
        void CB_RES_2_HL_E();
        void CB_RES_2_A();
        void CB_RES_3_B();
        void CB_RES_3_C();
        void CB_RES_3_D();
        void CB_RES_3_E();
        void CB_RES_3_H();
        void CB_RES_3_L();
        void CB_RES_3_HL_E();
        void CB_RES_3_A();
        void CB_RES_4_B();
        void CB_RES_4_C();
        void CB_RES_4_D();
        void CB_RES_4_E();
        void CB_RES_4_H();
        void CB_RES_4_L();
        void CB_RES_4_HL_E();
        void CB_RES_4_A();
        void CB_RES_5_B();
        void CB_RES_5_C();
        void CB_RES_5_D();
        void CB_RES_5_E();
        void CB_RES_5_H();
        void CB_RES_5_L();
        void CB_RES_5_HL_E();
        void CB_RES_5_A();
        void CB_RES_6_B();
        void CB_RES_6_C();
        void CB_RES_6_D();
        void CB_RES_6_E();
        void CB_RES_6_H();
        void CB_RES_6_L();
        void CB_RES_6_HL_E();
        void CB_RES_6_A();
        void CB_RES_7_B();
        void CB_RES_7_C();
        void CB_RES_7_D();
        void CB_RES_7_E();
        void CB_RES_7_H();
        void CB_RES_7_L();
        void CB_RES_7_HL_E();
        void CB_RES_7_A();
        void CB_SET_0_B();
        void CB_SET_0_C();
        void CB_SET_0_D();
        void CB_SET_0_E();
        void CB_SET_0_H();
        void CB_SET_0_L();
        void CB_SET_0_HL_E();
        void CB_SET_0_A();
        void CB_SET_1_B();
        void CB_SET_1_C();
        void CB_SET_1_D();
        void CB_SET_1_E();
        void CB_SET_1_H();
        void CB_SET_1_L();
        void CB_SET_1_HL_E();
        void CB_SET_1_A();
        void CB_SET_2_B();
        void CB_SET_2_C();
        void CB_SET_2_D();
        void CB_SET_2_E();
        void CB_SET_2_H();
        void CB_SET_2_L();
        void CB_SET_2_HL_E();
        void CB_SET_2_A();
        void CB_SET_3_B();
        void CB_SET_3_C();
        void CB_SET_3_D();
        void CB_SET_3_E();
        void CB_SET_3_H();
        void CB_SET_3_L();
        void CB_SET_3_HL_E();
        void CB_SET_3_A();
        void CB_SET_4_B();
        void CB_SET_4_C();
        void CB_SET_4_D();
        void CB_SET_4_E();
        void CB_SET_4_H();
        void CB_SET_4_L();
        void CB_SET_4_HL_E();
        void CB_SET_4_A();
        void CB_SET_5_B();
        void CB_SET_5_C();
        void CB_SET_5_D();
        void CB_SET_5_E();
        void CB_SET_5_H();
        void CB_SET_5_L();
        void CB_SET_5_HL_E();
        void CB_SET_5_A();
        void CB_SET_6_B();
        void CB_SET_6_C();
        void CB_SET_6_D();
        void CB_SET_6_E();
        void CB_SET_6_H();
        void CB_SET_6_L();
        void CB_SET_6_HL_E();
        void CB_SET_6_A();
        void CB_SET_7_B();
        void CB_SET_7_C();
        void CB_SET_7_D();
        void CB_SET_7_E();
        void CB_SET_7_H();
        void CB_SET_7_L();
        void CB_SET_7_HL_E();
        void CB_SET_7_A();
};

#endif
